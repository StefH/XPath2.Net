pool:
  vmImage: 'windows-2019'

variables:
  Prerelease: 'ci'
  buildType: 'azure-pipelines-ci'
  buildId: "$(Build.BuildId)"
  buildProjects: '**/src/**/+(XPath2|XPath2.Extensions).csproj'

steps:
# Print buildId
- script: |
    echo "BuildId = $(buildId)"
  displayName: 'Print buildId'

# Install SonarScanner
- script: |
    dotnet tool install --global dotnet-sonarscanner
  displayName: Install SonarScanner

# Begin SonarScanner
# See also
# - https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools, else you get this error: `Since you just installed the .NET Core SDK, you will need to reopen the Command Prompt window before running the tool you installed.`
# - https://github.com/dotnet/cli/issues/8368
# - https://github.com/Microsoft/vsts-tasks/issues/8291
#
- script: |
    %USERPROFILE%\.dotnet\tools\dotnet-sonarscanner begin /k:"StefH_XPath2.Net" /o:"stefh-github" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="$(SONAR_TOKEN)" /v:"$(buildId)" /d:sonar.cs.opencover.reportsPaths="**\coverage.opencover.xml"
  displayName: Begin SonarScanner

- task: DotNetCoreCLI@2
  displayName: Build Projects in Debug configuration
  inputs:
    command: 'build'
    arguments: /p:Configuration=Debug # https://github.com/MicrosoftDocs/vsts-docs/issues/1976
    projects: $(buildProjects)


# Build tests and run tests for net452 and netcoreapp2.1 (with coverage)
- script: |
    dotnet test ./tests/XPath2.Tests/XPath2.Tests.csproj --configuration Debug --framework net452
    dotnet test ./tests/XPath2.Tests/XPath2.Tests.csproj --configuration Debug --framework netcoreapp2.1 --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
  displayName: 'Build tests and run tests for net452 and netcoreapp2.1 (with coverage)'

# End SonarScanner
- script: |
    %USERPROFILE%\.dotnet\tools\dotnet-sonarscanner end /d:sonar.login="$(SONAR_TOKEN)"
  displayName: End SonarScanner

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

# Based on https://whereslou.com/2018/09/versioning-and-publishing-nuget-packages-automatically-using-azure-devops-pipelines/
- task: DotNetCoreCLI@2
  displayName: Build Projects in Release configuration
  inputs:
    command: 'build'
    arguments: /p:Configuration=Release # https://github.com/MicrosoftDocs/vsts-docs/issues/1976
    projects: $(buildProjects)

- task: DotNetCoreCLI@2
  displayName: Pack
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    command: pack
    configuration: 'Release'
    packagesToPack: $(buildProjects)
    nobuild: true
    packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
    verbosityPack: 'normal'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'

- task: DotNetCoreCLI@2
  displayName: Push to MyGet
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    command: custom
    custom: nuget
    arguments: push $(Build.ArtifactStagingDirectory)\packages\*.nupkg  -n true --source https://www.myget.org/F/xpath2/api/v3/index.json --no-service-endpoint --api-key $(MyGetKey)
